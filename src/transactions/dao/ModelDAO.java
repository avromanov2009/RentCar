package transactions.dao;import transactions.connection.ConnectionManager;import transactions.entity.Model;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Optional;/** * Created by andrei on 27.11.17. */public final class ModelDAO {    private static final String GET_ALL_MODELS = "select id_model, model, class_id, brand_id from model";    private static final String GET_MODEL_BY_ID = "select id_model, class_id, brand_id, model from model where id_model = ?";    private static final String GET_MODEL_BY_CLASSID = "select id_model, class_id, brand_id, model from model where class_id = ?";    private static ModelDAO INSTANCE = null;    public static ModelDAO getInstance() {        if (INSTANCE == null) {            synchronized (ModelDAO.class) {                if (INSTANCE == null) {                    INSTANCE = new ModelDAO();                }            }        }        return INSTANCE;    }    public Optional<List<Model>> getAllModels() throws SQLException {        try (Connection con = ConnectionManager.getConnection()) {            con.setAutoCommit(false);            PreparedStatement preparedStatement = con.prepareStatement(GET_ALL_MODELS);            ResultSet resultSet = preparedStatement.executeQuery();            con.commit();            List<Model> allModels = new ArrayList<>();            while (resultSet.next()) {                allModels.add(new Model(resultSet.getInt("id_model"), resultSet.getInt("class_id"), resultSet.getInt("brand_id"), resultSet.getString("model")));            }            return Optional.of(allModels);        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.empty();    }    public Optional<Model> getModelById(int id) {        try (Connection con = ConnectionManager.getConnection()) {            con.setAutoCommit(false);            PreparedStatement preparedStatement = con.prepareStatement(GET_MODEL_BY_ID);            preparedStatement.setInt(1, id);            Optional<Model> result = result(preparedStatement.executeQuery());            preparedStatement.close();            return result;        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.empty();    }    public Optional<Model> getModelByClassId(int class_id) {        try (Connection con = ConnectionManager.getConnection()) {            con.setAutoCommit(false);            PreparedStatement preparedStatement = con.prepareStatement(GET_MODEL_BY_CLASSID);            preparedStatement.setInt(1, class_id);            Optional<Model> result = result(preparedStatement.executeQuery());            preparedStatement.close();            return result;        } catch (SQLException e) {            e.printStackTrace();        }        return Optional.empty();    }    private Optional<Model> result(ResultSet inputResultSet) throws SQLException {        if (inputResultSet != null) {            Model model = new Model();            while (inputResultSet.next()) {                model.setId_model(inputResultSet.getInt("id_model"));                model.setClass_id(inputResultSet.getInt("class_id"));                model.setBrand_id(inputResultSet.getInt("brand_id"));                model.setModel(inputResultSet.getString("model"));            }            return Optional.of(model);        }        return Optional.empty();    }}